/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.doctor;

import ui.patient.UpdateMyProfile;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import com.mycompany.healthcaresystem.DataLoader;
import com.mycompany.healthcaresystem.Utils;
import model.Person;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.HospitalSystem;
import model.Patient;
import ui.LoginPanel;

/**
 *
 * @author Anjali
 */
public class DoctorViewPanel extends javax.swing.JPanel {

    /**
     * Creates new form LoginAsDoctor
     */
    ;
    JPanel containerPanel;
    HospitalSystem hospitalSystem;
    Person person;

    public DoctorViewPanel(JPanel containerPanel, HospitalSystem hospitalSystem, Person person) {
        initComponents();
        this.containerPanel = containerPanel;
        this.hospitalSystem = hospitalSystem;
        this.person = person;

        lblName.setText(person.getfName() + " " + person.getlName());

        populateTable(this.hospitalSystem.getPatientDirectory().getPatients());
    }

    public void populateTable(List<Patient> patients) {
        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
        model.setRowCount(0);
        for (Patient patient : patients) {
            Object[] row = new Object[5];
            row[0] = patient.getPatienId();
            row[1] = patient;
            row[2] = patient.getHouse().getCommunity().getCity();
            row[3] = patient.getHouse().getCommunity();
            if(patient.getEncounterHistory().getEncounters().size() > 0) {
               row[4] = patient.getEncounterHistory().getEncounters().get(patient.getEncounterHistory().getEncounters().size() - 1); 
            }
            else {
                row[4] = "Not visited yet";
            }
            
            model.addRow(row);
        }
        countLbl.setText("");
        countLbl.setText("Number of patients from search :" + patients.size());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCreate = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnView1 = new javax.swing.JButton();
        ComBoxFilter = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        lblProfileName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDisplay = new javax.swing.JTable();
        lblName = new javax.swing.JLabel();
        countLbl = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        deletePatient = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        btnCreate.setText("Add new Patient");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnRefresh.setText("Display all patients");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnView1.setText("View Patient Details");
        btnView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnView1ActionPerformed(evt);
            }
        });

        ComBoxFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Patient with irregular Heart Beats", "Patient with irregular body Tempreature", "Patient with irregular Blood Pressure", "Abnormal Patient" }));
        ComBoxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComBoxFilterActionPerformed(evt);
            }
        });

        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
        });
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnSearch.setText("Search:");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblProfileName.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 24)); // NOI18N
        lblProfileName.setForeground(new java.awt.Color(102, 51, 255));
        lblProfileName.setText("Welcome ");

        tblDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "Patient First Name", "City", "Community", "Last visited"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDisplay);

        lblName.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 24)); // NOI18N
        lblName.setForeground(new java.awt.Color(102, 51, 255));
        lblName.setText(",");

        countLbl.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 18)); // NOI18N
        countLbl.setForeground(new java.awt.Color(102, 51, 255));
        countLbl.setText("Number of patients:");

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        deletePatient.setText("Delete patient");
        deletePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(lblProfileName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deletePatient, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCreate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1023, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ComBoxFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnView1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(202, 202, 202))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(countLbl)
                .addGap(228, 228, 228))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ComBoxFilter, txtSearch});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProfileName)
                    .addComponent(lblName))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComBoxFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnView1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deletePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ComBoxFilter, txtSearch});

    }// </editor-fold>//GEN-END:initComponents

    private void btnView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnView1ActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblDisplay.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, " Please select patient to view details: ",
                    "FORM ERROR", JOptionPane.ERROR_MESSAGE);
        } else {

            DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
            Patient patient = (Patient) model.getValueAt(selectedRow, 1);
            EncounterDetailPanel vsPanel = new EncounterDetailPanel(containerPanel, patient);
            containerPanel.add(vsPanel);
            CardLayout cardLayout = (CardLayout) containerPanel.getLayout();
            cardLayout.next(containerPanel);
        }

    }//GEN-LAST:event_btnView1ActionPerformed

    private void ComBoxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComBoxFilterActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_ComBoxFilterActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        List<Patient> result = new ArrayList<>();
        String userInput = txtSearch.getText();
        City city = null;

        if (Utils.isValidText(userInput)) {
            city = this.hospitalSystem.getCityByName(userInput);
            if (city == null) {
                JOptionPane.showMessageDialog(this, "No city exists for given input hence showing for all cities", "INCORRECT CITY", JOptionPane.INFORMATION_MESSAGE);
            }
        }

        if (ComBoxFilter.getSelectedItem().equals("Abnormal Patient")) {
            result = this.hospitalSystem.getPatientDirectory().findAbNormalPatients(city);
        } else if (ComBoxFilter.getSelectedItem().equals("Patient with irregular Blood Pressure")) {
            result = this.hospitalSystem.getPatientDirectory().findPatientWithAbnormalBloodPressure(city);
        } else if (ComBoxFilter.getSelectedItem().equals("Patient with irregular Heart Beats")) {
            result = this.hospitalSystem.getPatientDirectory().findPatientWithAbnormalHeartRate(city);
        } else if (ComBoxFilter.getSelectedItem().equals("Patient with irregular body Tempreature")) {
            result = this.hospitalSystem.getPatientDirectory().findPatientWithAbnormalTemperature(city);
        } else {
            result = this.hospitalSystem.getPatientDirectory().findPatientsFromCity(city);
        }

        populateTable(result);

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        CreatePatientPanel createPanel = new CreatePatientPanel(containerPanel, hospitalSystem);
        containerPanel.add(createPanel);
        CardLayout cardLayout = (CardLayout) containerPanel.getLayout();
        cardLayout.next(containerPanel);

    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateTable(this.hospitalSystem.getPatientDirectory().getPatients());

    }//GEN-LAST:event_btnRefreshActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        // TODO add your handling code here:
        txtSearch.setText("");
    }//GEN-LAST:event_txtSearchFocusGained

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        
        containerPanel.removeAll();
        LoginPanel loginPanel = new LoginPanel(containerPanel, hospitalSystem);
        containerPanel.add(loginPanel);
        CardLayout cardLayout = (CardLayout) containerPanel.getLayout();
        cardLayout.next(containerPanel);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void deletePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDisplay.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, " Please select patient to delete from the system: ",
                    "FORM ERROR", JOptionPane.ERROR_MESSAGE);
        } else {

            DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
            Patient patient = (Patient) model.getValueAt(selectedRow, 1);
            boolean deleteResult = this.hospitalSystem.getPatientDirectory().deletePatient(patient);

            if (deleteResult) {
                JOptionPane.showMessageDialog(this, " Patient " + patient.getPatienId()+  "is deleted successfully from the system",
                        "DELETE SUCCESSFULL", JOptionPane.INFORMATION_MESSAGE);
                populateTable(this.hospitalSystem.getPatientDirectory().getPatients());
            } else {
                JOptionPane.showMessageDialog(this, "Unable to delete patient.. Please try again",
                        "DELETE FAILED", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deletePatientActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComBoxFilter;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView1;
    private javax.swing.JLabel countLbl;
    private javax.swing.JButton deletePatient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblProfileName;
    private javax.swing.JTable tblDisplay;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
